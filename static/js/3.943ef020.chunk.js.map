{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/Contactdata.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","CheckoutCancelled","CheckoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","checkValidity","rules","isValid","trim","length","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.943ef020.chunk.js","sourcesContent":["import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css'\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{ width: '100%', margin: 'auto' }}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button btnType=\"Danger\" clicked={props.CheckoutCancelled}>CANCEL</Button>\n            <Button btnType=\"Success\" clicked={props.CheckoutContinued}>CONTINUE</Button>\n        </div>\n    )\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './Contactdata.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your e-mail'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [{\n                        value: 'fastest', displayValue: 'Fastest'\n                    }, {\n                        value: 'cheapest', displayValue: 'Cheapest'\n                    }]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            },\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token);\n\n    }\n\n    checkValidity = (value, rules) => {\n        let isValid = true;\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n        \n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement ={\n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({ orderForm: updatedOrderForm, formIsValid })\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                    />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\nimport { connect } from 'react-redux';\n\nclass Checkout extends Component {\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render () {\n        let summary = <Redirect to=\"/\"/>;\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings}\n                        CheckoutContinued={this.checkoutContinuedHandler}\n                        CheckoutCancelled={this.checkoutCancelledHandler}\n                        />\n                    <Route \n                        path={this.props.match.path + '/contact-data'} \n                        component={ContactData} />\n                </div>\n            )\n        }\n        return summary;\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\nimport classes from './Input.module.css'\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\n            break;\n        case ('textarea'):\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\n            break;\n        case ('select'):\n            inputElement = (\n                <select \n                    className={inputClasses.join(' ')} \n                    value={props.value} onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\n                    ))}\n                </select>\n            )\n            break;\n        default:\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\n    }\n\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"Contactdata_ContactData__n6UuK\"};"],"sourceRoot":""}