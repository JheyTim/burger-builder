{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","checkValidity","rules","isValid","trim","length","maxLength","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","onAuth","switchAuthMethodHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthredirectPath","formElementsArray","id","config","form","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.9f918171.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.module.css'\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\n            break;\n        case ('textarea'):\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\n            break;\n        case ('select'):\n            inputElement = (\n                <select \n                    className={inputClasses.join(' ')} \n                    value={props.value} onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\n                    ))}\n                </select>\n            )\n            break;\n        default:\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\n    }\n\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount () {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthredirectPath();\n        }\n    }\n\n    checkValidity = (value, rules) => {\n        let isValid = true;\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n        \n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthMethodHandler = () => {\n        this.setState(prevState => {\n            return {\n                isSignup: !prevState.isSignup\n            };\n        })\n    }\n\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        }\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button btnType=\"Danger\" clicked={this.switchAuthMethodHandler}>Switch to {this.state.isSignup ? 'Sign in': 'Sign up'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthredirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}